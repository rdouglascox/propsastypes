-- File generated by the BNF Converter (bnfc 2.9.5).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Church.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Church.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transVarId :: Church.Abs.VarId -> Result
transVarId x = case x of
  Church.Abs.VarId string -> failure x

transTerm :: Church.Abs.Term -> Result
transTerm x = case x of
  Church.Abs.Var varid -> failure x
  Church.Abs.App term1 term2 -> failure x
  Church.Abs.Abs varid type_ term -> failure x
  Church.Abs.Pair term1 term2 -> failure x
  Church.Abs.Fst term -> failure x
  Church.Abs.Snd term -> failure x
  Church.Abs.Inl term type_ -> failure x
  Church.Abs.Inr term type_ -> failure x
  Church.Abs.Case term1 term2 term3 -> failure x
  Church.Abs.Abort term type_ -> failure x

transType :: Church.Abs.Type -> Result
transType x = case x of
  Church.Abs.A -> failure x
  Church.Abs.B -> failure x
  Church.Abs.C -> failure x
  Church.Abs.D -> failure x
  Church.Abs.Bot -> failure x
  Church.Abs.Func type_1 type_2 -> failure x
  Church.Abs.Sum type_1 type_2 -> failure x
  Church.Abs.Prod type_1 type_2 -> failure x

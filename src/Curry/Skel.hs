-- File generated by the BNF Converter (bnfc 2.9.5).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Curry.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Curry.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transVariable :: Curry.Abs.Variable -> Result
transVariable x = case x of
  Curry.Abs.Variable string -> failure x

transTerm :: Curry.Abs.Term -> Result
transTerm x = case x of
  Curry.Abs.Var variable -> failure x
  Curry.Abs.App term1 term2 -> failure x
  Curry.Abs.Abs variable term -> failure x
  Curry.Abs.Pair term1 term2 -> failure x
  Curry.Abs.Fst term -> failure x
  Curry.Abs.Snd term -> failure x
  Curry.Abs.Inl term -> failure x
  Curry.Abs.Inr term -> failure x
  Curry.Abs.Case term1 term2 term3 -> failure x
  Curry.Abs.Abrt term -> failure x
  Curry.Abs.T -> failure x
  Curry.Abs.F -> failure x
